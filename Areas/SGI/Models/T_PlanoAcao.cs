//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DynamicForms.Areas.SGI.Model
{
    using DynamicForms.Models;
    using DynamicForms.Util;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Metadata.Builders;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;

    public class T_PlanoAcao
    {
        [TAB(Value = "PRINCIPAL")] [Display(Name = "ID")] [Required(ErrorMessage = "Campo PLA_ID requirido.")] public int PLA_ID { get; set; }
        [TAB(Value = "PRINCIPAL")] [Display(Name = "DESCRICAO")] [Required(ErrorMessage = "Campo PLA_DESCRICAO requirido.")] [MaxLength(3000, ErrorMessage = "Maximode * caracteres, campo PLA_DESCRICAO")] public string PLA_DESCRICAO { get; set; }
        [TAB(Value = "PRINCIPAL")] [Display(Name = "ID")] public int? MET_ID { get; set; }
        [TAB(Value = "PRINCIPAL")] [Display(Name = "STATUS")] [MaxLength(1, ErrorMessage = "Maximode 1 caracteres, campo PLA_STATUS")] public string PLA_STATUS { get; set; }
        [TAB(Value = "PRINCIPAL")] [Display(Name = "DATA")] public DateTime PLA_DATA { get; set; }
        [TAB(Value = "PRINCIPAL")] [Display(Name = "METAPERIODO")] [MaxLength(50, ErrorMessage = "Maximode 50 caracteres, campo PLA_METAPERIODO")] public string PLA_METAPERIODO { get; set; }
        [TAB(Value = "PRINCIPAL")] [Display(Name = "VLRPERIODO")] [MaxLength(50, ErrorMessage = "Maximode 50 caracteres, campo PLA_VLRPERIODO")] public string PLA_VLRPERIODO { get; set; }
        [TAB(Value = "PRINCIPAL")] [Display(Name = "METACULADO")] [MaxLength(50, ErrorMessage = "Maximode 50 caracteres, campo PLA_METACULADO")] public string PLA_METACULADO { get; set; }
        [TAB(Value = "PRINCIPAL")] [Display(Name = "VLRACUMULADO")] [MaxLength(50, ErrorMessage = "Maximode 50 caracteres, campo PLA_VLRACUMULADO")] public string PLA_VLRACUMULADO { get; set; }
        [TAB(Value = "PRINCIPAL")] [Display(Name = "REFERENCIA")] [MaxLength(50, ErrorMessage = "Maximode 50 caracteres, campo PLA_REFERENCIA")] public string PLA_REFERENCIA { get; set; }
        [TAB(Value = "PRINCIPAL")] [Display(Name = "ID")] [Required(ErrorMessage = "Campo USE_ID requirido.")] public int USE_ID { get; set; }
        [NotMapped] public string PlayAction { get; set; }
        [NotMapped] public string PlayMsgErroValidacao { get; set; }
        [NotMapped] public int? IndexClone { get; set; }

        public virtual T_Metas T_Metas { get; set; }
        public virtual T_Usuario T_Usuario { get; set; }
        public bool BeforeChanges(List<object> objects, ref CloneObjeto cloneObjeto, List<LogPlay> Logs, ref int modo_insert)
        {
            return true;
        }
    }

    class T_PlanoAcao_ResultConfiguration : IEntityTypeConfiguration<T_PlanoAcao>
    {
        /*
        * Migração do EntityFramework para o EntityCore, o construtor foi substituido pelo método
        * public void Configure(EntityTypeBuilder<> builder), que é a implementação da interface
        * IEntityTypeConfiguration<>
        * 
        public T_PlanoAcao_ResultConfiguration()
        {
            // Configurando propriedades e chaves
            this.HasKey(c => c.PLA_ID);

            this.Property(c => c.PLA_ID)
                .HasColumnName("PLA_ID")
                .IsRequired();

            this.Property(c => c.PLA_DESCRICAO)
                .HasColumnName("PLA_DESCRICAO")
                .HasMaxLength(3000)
                .IsRequired();

            this.Property(c => c.MET_ID)
               .HasColumnName("MET_ID")
               .IsOptional();

            this.HasOptional(c => c.T_Metas)
                .WithMany(c => c.T_PlanoAcao)
                .HasForeignKey(c => c.MET_ID);

            this.Property(c => c.PLA_STATUS)
              .HasColumnName("PLA_STATUS")
              .HasMaxLength(1)
              .IsOptional();

            this.Property(c => c.PLA_DATA)
              .HasColumnName("PLA_DATA")
              .IsOptional();

            this.Property(c => c.PLA_METAPERIODO)
              .HasColumnName("PLA_METAPERIODO")
              .HasMaxLength(50)
              .IsOptional();

            this.Property(c => c.PLA_VLRPERIODO)
              .HasColumnName("PLA_VLRPERIODO")
              .HasMaxLength(50)
              .IsOptional();

            this.Property(c => c.PLA_METACULADO)
              .HasColumnName("PLA_METACULADO")
              .HasMaxLength(50)
              .IsOptional();

            this.Property(c => c.PLA_VLRACUMULADO)
              .HasColumnName("PLA_VLRACUMULADO")
              .HasMaxLength(50)
              .IsOptional();

            this.Property(c => c.PLA_REFERENCIA)
              .HasColumnName("PLA_REFERENCIA")
              .HasMaxLength(50)
              .IsOptional();

            this.Property(c => c.USER_ID)
              .HasColumnName("USER_ID")
              .IsRequired();

            this.HasRequired(c => c.T_Usuario)
                .WithMany(c => c.T_PlanoAcao)
                .HasForeignKey(c => c.USER_ID);
                    
            // Configurando a Tabela
            this.ToTable("T_PLANOACAO");
        }
        */

        public void Configure(EntityTypeBuilder<T_PlanoAcao> builder)
        {
            // Configurando propriedades e chaves
            builder.HasKey(c => c.PLA_ID);

            builder.Property(c => c.PLA_ID)
                .HasColumnName("PLA_ID")
                .IsRequired();

            builder.Property(c => c.PLA_DESCRICAO)
                .HasColumnName("PLA_DESCRICAO")
                .HasMaxLength(3000)
                .IsRequired();

            builder.Property(c => c.MET_ID)
               .HasColumnName("MET_ID");

            builder.HasOne(c => c.T_Metas)
                .WithMany(c => c.T_PlanoAcao)
                .HasForeignKey(c => c.MET_ID);

            builder.Property(c => c.PLA_STATUS)
              .HasColumnName("PLA_STATUS")
              .HasMaxLength(1);

            builder.Property(c => c.PLA_DATA)
              .HasColumnName("PLA_DATA");

            builder.Property(c => c.PLA_METAPERIODO)
              .HasColumnName("PLA_METAPERIODO")
              .HasMaxLength(50);

            builder.Property(c => c.PLA_VLRPERIODO)
              .HasColumnName("PLA_VLRPERIODO")
              .HasMaxLength(50);

            builder.Property(c => c.PLA_METACULADO)
              .HasColumnName("PLA_METACULADO")
              .HasMaxLength(50);

            builder.Property(c => c.PLA_VLRACUMULADO)
              .HasColumnName("PLA_VLRACUMULADO")
              .HasMaxLength(50);

            builder.Property(c => c.PLA_REFERENCIA)
              .HasColumnName("PLA_REFERENCIA")
              .HasMaxLength(50);

            builder.Property(c => c.USE_ID)
              .HasColumnName("USE_ID")
              .IsRequired();

            builder.HasOne(c => c.T_Usuario)
                .WithMany(c => c.T_PlanoAcao)
                .HasForeignKey(c => c.USE_ID);

            // Configurando a Tabela
            builder.ToTable("T_PLANOACAO");
        }
    }
}
