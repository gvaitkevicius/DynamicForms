//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace DynamicForms.Areas.SGI.Model
{
    public class T_Informacoes_Complementares
    {
        public int INF_ID { get; set; }
        public string INF_DESCRICAO { get; set; }
        public decimal INF_VALOR { get; set; }
        public int MET_ID { get; set; }
        public string INF_DATA { get; set; }
    
        public virtual T_Metas T_Metas { get; set; }
    }

    class T_Informacoes_Complementares_ResultConfiguration : IEntityTypeConfiguration<T_Informacoes_Complementares>
    {
        /*
        * Migração do EntityFramework para o EntityCore, o construtor foi substituido pelo método
        * public void Configure(EntityTypeBuilder<> builder), que é a implementação da interface
        * IEntityTypeConfiguration<>
        * 
        public T_Informacoes_Complementares_ResultConfiguration()
        {
            // Configurando propriedades e chaves
            this.HasKey(c => c.INF_ID);

            this.Property(c => c.INF_ID)
                .HasColumnName("INF_ID")
                .IsRequired();

            this.Property(c => c.INF_DESCRICAO)
                .HasMaxLength(100)
                .HasColumnName("INF_DESCRICAO")
                .IsRequired();

            this.Property(c => c.INF_VALOR)
                .HasColumnName("INF_VALOR")
                .HasPrecision(18,2)
                .IsRequired();

            this.Property(c => c.MET_ID)
                .HasColumnName("MET_ID")
                .IsRequired();

            this.HasRequired(c => c.T_Metas)
                .WithMany(c => c.T_Informacoes_Complementares)
                .HasForeignKey(x => x.MET_ID);

            this.Property(c => c.INF_DATA)
                .HasColumnName("INF_DATA")
                .HasMaxLength(8)
                .IsRequired();

            // Configurando a Tabela
            this.ToTable("T_INFORMACOES_COMPLEMENTARES");
        }
        */

        public void Configure(EntityTypeBuilder<T_Informacoes_Complementares> builder)
        {
            // Configurando propriedades e chaves
            builder.HasKey(c => c.INF_ID);

            builder.Property(c => c.INF_ID)
                .HasColumnName("INF_ID")
                .IsRequired();

            builder.Property(c => c.INF_DESCRICAO)
                .HasMaxLength(100)
                .HasColumnName("INF_DESCRICAO")
                .IsRequired();

            builder.Property(c => c.INF_VALOR)
                .HasColumnName("INF_VALOR")
                .HasColumnType("decimal(18, 2)")
                .IsRequired();

            builder.Property(c => c.MET_ID)
                .HasColumnName("MET_ID")
                .IsRequired();

            builder.HasOne(c => c.T_Metas)
                .WithMany(c => c.T_Informacoes_Complementares)
                .HasForeignKey(x => x.MET_ID);

            builder.Property(c => c.INF_DATA)
                .HasColumnName("INF_DATA")
                .HasMaxLength(8)
                .IsRequired();

            // Configurando a Tabela
            builder.ToTable("T_INFORMACOES_COMPLEMENTARES");
        }
    }
}
